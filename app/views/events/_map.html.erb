
<div id='map'></div>
<div id='station'></div>
<script>
let map
let geocoder

//初期化関数
function initMap(){
  let initlat = 80.7828;
  let initlng = -73.9653;
  let initzoom = 12;

  geocoder = new google.maps.Geocoder();
  map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: initlat, lng: initlng}, zoom: initzoom,
  });
  
  codeAddress();
}

//GoogleMapにピン表示を行う関数
function codeAddress(){
  geocoder.geocode( { 'address': gon.location}, function(results, status) {
    if (status == 'OK') {
      map.setCenter(results[0].geometry.location);
      var marker = new google.maps.Marker({
          map: map,
          position: results[0].geometry.location
      });
      getNearStation(results[0].geometry.location.lng(), results[0].geometry.location.lat());
    } else {
      //位置情報が取得できなかった場合
      var g_div = document.getElementById('map');
      g_div.innerHTML = "<h3>地図情報なし<h3>";
    }
  });
}

//近隣の駅情報を取得する関数
function getNearStation(lng, lat) {
 heartrailsURL = "http://express.heartrails.com/api/json?method=getStations&";
 heartrailsURL += "x=" + lng + "&";
 heartrailsURL += "y=" + lat + "&";
 heartrailsURL += "jsonp=getStation";//JSONPのコールバック関数
 var script = document.createElement('script');
 script.src = heartrailsURL;
 document.body.appendChild(script);
}
 
//コールバック関数
function getStation(result) {
 var stationStr = "";
 const STATION_MAX = 3;
 var numOfStations = Math.min(result["response"]["station"].length, STATION_MAX);

 for(i = 0; i < numOfStations; i++) {
  stationStr += result["response"]["station"][i].line + " ";
  stationStr += result["response"]["station"][i].name;
  stationStr += "駅：" + result["response"]["station"][i].distance + "<br>";
 }
 stationStr += "Searched by <a href = \"http://www.heartrails.com/\">http://www.heartrails.com/</a>";
 var g_map_tag = document.getElementById('station');
 $(g_map_tag).append(stationStr);
}

</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyC-pdPtNhTY07UJjxYiQsd84moJ5ep2aJ8&callback=initMap" async defer></script>